{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":31186,"status":"ok","timestamp":1746696979777,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"44a6h8L8IGIE"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torchvision import transforms, datasets\n","from torch.utils.data import DataLoader\n","from tqdm import tqdm\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import precision_score, recall_score, confusion_matrix, classification_report\n","\n"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":16,"status":"ok","timestamp":1746697075603,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"-viqGZAsMeAY"},"outputs":[],"source":["class CNNBlock(nn.Module):\n","    def __init__(self):\n","        super(CNNBlock, self).__init__()\n","        '''self.conv1 = nn.Conv2d(3, 32, 3, padding=1)\n","        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)\n","        self.pool = nn.MaxPool2d(2, 2)\n","        self.dropout = nn.Dropout(0.3)'''\n","\n","\n","\n","        self.conv1 = nn.Sequential(\n","              nn.Conv2d(3, 32, kernel_size=3, padding=1),\n","              nn.BatchNorm2d(32),\n","              nn.ReLU(inplace=True)\n","          )\n","        self.conv2 = nn.Sequential(\n","              nn.Conv2d(32, 64, kernel_size=3, padding=1),\n","              nn.BatchNorm2d(64),\n","              nn.ReLU(inplace=True)\n","          )\n","        self.conv3 = nn.Sequential(\n","              nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1),\n","              nn.BatchNorm2d(128),\n","              nn.ReLU(inplace=True)\n","          )\n","        self.pool = nn.MaxPool2d(2, 2)\n","        self.dropout = nn.Dropout(0.3)\n","\n","\n","    def forward(self, x):\n","        x = self.conv1(x)   # [B, 32, H, W]\n","        x = self.conv2(x)   # [B, 64, H, W]\n","        x = self.conv3(x)   # [B, 128, H/2, W/2] due to stride=2\n","        x =  self.pool(x)\n","        x = self.dropout(x)\n","        return x\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":126,"status":"ok","timestamp":1746697151638,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"WRi9YANUMiOo"},"outputs":[],"source":["class SimpleTransformerBlock(nn.Module):\n","    def __init__(self, dim=128, heads=4):\n","        super(SimpleTransformerBlock, self).__init__()\n","        self.attn = nn.MultiheadAttention(dim, heads, batch_first=True)\n","        self.ff = nn.Sequential(\n","            nn.Linear(dim, dim * 4),\n","            nn.GELU(),\n","            nn.Dropout(0.1),\n","            nn.Linear(dim * 4, dim)\n","        )\n","        self.norm1 = nn.LayerNorm(dim)\n","        self.norm2 = nn.LayerNorm(dim)\n","\n","    def forward(self, x):\n","        B, C, H, W = x.size()\n","        x = x.view(B, C, -1).permute(0, 2, 1)\n","        attn_out, _ = self.attn(x, x, x)\n","        x = self.norm1(x + attn_out)\n","        x = self.norm2(x + self.ff(x))\n","        x = x.permute(0, 2, 1).view(B, C, H, W)\n","        return x\n"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":64,"status":"ok","timestamp":1746697154852,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"UNLzsWeVMmzi"},"outputs":[],"source":["class Classifier(nn.Module):\n","    def __init__(self, in_channels=128, num_classes=2):\n","        super(Classifier, self).__init__()\n","        self.pool = nn.AdaptiveAvgPool2d(1)\n","        self.fc = nn.Linear(in_channels, num_classes)\n","\n","    def forward(self, x):\n","        x = self.pool(x).squeeze(-1).squeeze(-1)\n","        return self.fc(x)\n","\n","class CNNMobileViT(nn.Module):\n","    def __init__(self, num_classes=2):\n","        super(CNNMobileViT, self).__init__()\n","        self.cnn = CNNBlock()\n","        self.transformer = SimpleTransformerBlock()\n","        self.classifier = Classifier(num_classes=num_classes)\n","\n","    def forward(self, x):\n","        x = self.cnn(x)\n","        x = self.transformer(x)\n","        return self.classifier(x)\n"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":38,"status":"ok","timestamp":1746697159321,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"8zSzmf9aMtIp"},"outputs":[],"source":["# ✅ STEP 4: Set Up Dataset and Dataloaders\n","transform = transforms.Compose([\n","    transforms.Resize((128, 128)),\n","    transforms.ToTensor()\n","])"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":51615,"status":"ok","timestamp":1746697212301,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"jZnm9qsWMyGo","outputId":"b6fc47f4-3c1c-4c21-d875-e9e857517675"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# Mount Google Drive (if dataset is there)\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# Path to your data (change as needed)\n","data_path = \"/content/drive/MyDrive/face_image_dataset\""]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":1342,"status":"ok","timestamp":1746697235898,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"jfxGrdC9SqFN"},"outputs":[],"source":["dataset = datasets.ImageFolder(root=data_path, transform=transform)"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":16,"status":"ok","timestamp":1746697236328,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"_0dIttvbXkCA"},"outputs":[],"source":["train_size = int(0.8 * len(dataset))\n","val_size = len(dataset) - train_size\n","train_ds, val_ds = torch.utils.data.random_split(dataset, [train_size, val_size])"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":36,"status":"ok","timestamp":1746697237953,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"kXrKe3LeXq9H"},"outputs":[],"source":["train_loader = DataLoader(train_ds, batch_size=16, shuffle=True)\n","val_loader = DataLoader(val_ds, batch_size=4)"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":15,"status":"ok","timestamp":1746697240833,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"81YFrxs1cmcQ"},"outputs":[],"source":["train_losses = []\n","train_accuracies = []"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":27,"status":"ok","timestamp":1746697243577,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"Xs99uJokX0YP"},"outputs":[],"source":["# ✅ STEP 5: Training and Validation Functions\n","def train_model(model, criterion, optimizer, epochs=10):\n","    model.train()\n","    for epoch in range(epochs):\n","        total_loss = 0\n","        correct = 0\n","        total = 0\n","        for inputs, labels in tqdm(train_loader):\n","            inputs, labels = inputs, labels\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","            total_loss += loss.item()\n","            _, predicted = torch.max(outputs, 1)\n","            correct += (predicted == labels).sum().item()\n","            total += labels.size(0)\n","\n","        train_losses.append(total_loss)\n","        train_accuracies.append(100*correct/total)\n","        print(f\"Epoch {epoch+1}, Loss: {total_loss:.4f}, Accuracy: {100*correct/total:.2f}%\")\n","\n"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":30,"status":"ok","timestamp":1746697369681,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"wZskOljnX7Og"},"outputs":[],"source":["def evaluate_model(model):\n","    model.eval()\n","    correct = 0\n","    total = 0\n","    all_preds = []\n","    all_labels = []\n","    with torch.no_grad():\n","        for inputs, labels in val_loader:\n","            inputs, labels = inputs, labels\n","            outputs = model(inputs)\n","            _, predicted = torch.max(outputs, 1)\n","            correct += (predicted == labels).sum().item()\n","            total += labels.size(0)\n","            all_preds.extend(predicted.numpy())\n","            all_labels.extend(labels.numpy())\n","    print(f\"Validation Accuracy: {100*correct/total:.2f}%\")\n","    class_names = dataset.classes\n","    # Confusion Matrix\n","    cm = confusion_matrix(all_labels, all_preds)\n","    plt.figure(figsize=(8,6))\n","    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=class_names, yticklabels=class_names)\n","    plt.title(\"Confusion Matrix\")\n","    plt.xlabel(\"Predicted\")\n","    plt.ylabel(\"True\")\n","    plt.show()\n","\n","    # Precision, Recall, F1\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(all_labels, all_preds, target_names=class_names))"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":219768,"status":"ok","timestamp":1746697603094,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"},"user_tz":-330},"id":"I64DmexiX9F3","outputId":"d7fcc6ea-eed7-41cb-f4bf-e93210174726"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 10/10 [02:03<00:00, 12.34s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1, Loss: 3.3979, Accuracy: 84.62%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 10/10 [00:48<00:00,  4.82s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 2, Loss: 2.0837, Accuracy: 94.23%\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 10/10 [00:48<00:00,  4.80s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch 3, Loss: 1.9968, Accuracy: 94.23%\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["# ✅ STEP 6: Train and Evaluate\n","device = torch.device('cpu')\n","model = CNNMobileViT(num_classes=2)\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.001)\n","\n","train_model(model, criterion, optimizer, epochs=3)\n"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":975},"id":"cSH4mmH7Djof","executionInfo":{"status":"error","timestamp":1746697737282,"user_tz":-330,"elapsed":23621,"user":{"displayName":"Dr. Nancy Agarwal","userId":"10071700867972273899"}},"outputId":"402c1d65-502e-408f-f677-39fa78bd9230"},"outputs":[{"output_type":"stream","name":"stdout","text":["Validation Accuracy: 100.00%\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:407: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Classification Report:\n"]},{"output_type":"error","ename":"ValueError","evalue":"Number of classes, 1, does not match size of target_names, 2. Try specifying the labels parameter","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-1a892c7e0dd2>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mprecision_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecall_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassification_report\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mevaluate_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-14-185f8ea1efdf>\u001b[0m in \u001b[0;36mevaluate_model\u001b[0;34m(model)\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0;31m# Precision, Recall, F1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nClassification Report:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mall_preds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclass_names\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m                     )\n\u001b[1;32m    215\u001b[0m                 ):\n\u001b[0;32m--> 216\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mclassification_report\u001b[0;34m(y_true, y_pred, labels, target_names, sample_weight, digits, output_dict, zero_division)\u001b[0m\n\u001b[1;32m   2691\u001b[0m             )\n\u001b[1;32m   2692\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2693\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m   2694\u001b[0m                 \u001b[0;34m\"Number of classes, {0}, does not match size of \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2695\u001b[0m                 \u001b[0;34m\"target_names, {1}. Try specifying the labels \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Number of classes, 1, does not match size of target_names, 2. Try specifying the labels parameter"]}],"source":["from sklearn.metrics import precision_score, recall_score, confusion_matrix, classification_report\n","evaluate_model(model)"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}